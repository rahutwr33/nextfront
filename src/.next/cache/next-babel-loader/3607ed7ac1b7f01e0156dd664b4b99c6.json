{"ast":null,"code":"import axios from 'axios';\nimport apiConfig from '../config/api';\nimport pathToRegExp from 'path-to-regexp';\nimport cookies from 'js-cookie';\nimport Router from 'next/router';\nimport { toast } from 'react-toastify';\naxios.interceptors.request.use(config => {\n  return config;\n});\naxios.interceptors.response.use(response => {\n  return response;\n}, error => {\n  if (error.response.status === 401) {\n    toast.error('UnAutorized Access!');\n    Router.push('/');\n  }\n\n  return error;\n});\n\nconst execute = async (path, method = 'GET', {\n  params = {},\n  queries = {},\n  payloads = {},\n  headers = {}\n} = {}) => {\n  const compiler = pathToRegExp.compile(path);\n  const base = apiConfig.apiBaseUrl.replace(/~\\/$/, '');\n  const url = compiler(params || {});\n  var token = cookies.get('token');\n\n  if (token) {\n    headers['Authorization'] = `${token}`; //   if(url=='/getcategories'){\n    //    }else{\n    //       headers['Authorization'] = `${ token }`;\n    //     }\n  }\n\n  if (!headers['Content-Type']) {\n    headers['Content-Type'] = 'application/json';\n  }\n\n  if (!headers['Accept']) {\n    headers['Accept'] = 'application/json';\n  }\n\n  const options = {\n    method,\n    headers\n  };\n\n  if (method === 'POST' || method === 'PATCH' || method === 'PUT') {\n    options.data = payloads;\n  }\n\n  if (url == '/profilepic' || url == `/updatecampaign/` || url == `/upload-attachment`) {\n    options.headers['Content-Type'] = 'multipart/form-data';\n  }\n\n  if (queries) {\n    options.params = queries;\n  }\n\n  options.url = url;\n  options.baseURL = base;\n  console.log(options);\n  return await axios(options);\n};\n\nexport default {\n  get: (path, options) => execute(path, 'GET', options),\n  post: (path, options) => execute(path, 'POST', options),\n  put: (path, options) => execute(path, 'PUT', options),\n  patch: (path, options) => execute(path, 'PATCH', options),\n  delete: (path, options) => execute(path, 'DELETE', options)\n};","map":{"version":3,"sources":["C:/Users/rahul/Desktop/nextstarter/client/src/utils/middleware.js"],"names":["axios","apiConfig","pathToRegExp","cookies","Router","toast","interceptors","request","use","config","response","error","status","push","execute","path","method","params","queries","payloads","headers","compiler","compile","base","apiBaseUrl","replace","url","token","get","options","data","baseURL","console","log","post","put","patch","delete"],"mappings":"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","sourcesContent":["\r\nimport axios from 'axios';\r\nimport apiConfig from '../config/api';\r\nimport pathToRegExp from 'path-to-regexp';\r\nimport cookies from 'js-cookie'\r\nimport Router from 'next/router'\r\nimport { toast } from 'react-toastify'\r\n\r\naxios.interceptors.request.use((config) => {\r\n  return config;\r\n});\r\naxios.interceptors.response.use(response => {\r\n  return response;\r\n}, error => {\r\n if (error.response.status === 401) {\r\n  toast.error('UnAutorized Access!')\r\n  Router.push('/')\r\n }\r\nreturn error;\r\n});\r\n\r\nconst execute = async (path, method = 'GET', { params = {} , queries = {}, payloads = {}, headers = {} } = {}) => {\r\n  const compiler = pathToRegExp.compile(path);\r\n  const base = apiConfig.apiBaseUrl.replace(/~\\/$/, '');\r\n  const url = compiler(params || {});\r\n  var token = cookies.get('token')\r\n  if (token) {\r\n    headers['Authorization'] = `${token}`\r\n  //   if(url=='/getcategories'){\r\n     \r\n  //    }else{\r\n  //       headers['Authorization'] = `${ token }`;\r\n  //     }\r\n   \r\n  }\r\n\r\n  if ( ! headers['Content-Type']) {\r\n    headers['Content-Type'] = 'application/json';\r\n  }\r\n\r\n  if ( ! headers['Accept']) {\r\n    headers['Accept'] = 'application/json';\r\n  }\r\n\r\n  const options = { method, headers };\r\n\r\n  if (method === 'POST' || method === 'PATCH' || method ==='PUT') {\r\n    options.data = payloads;\r\n  }\r\n\r\n  if(url=='/profilepic' || url==`/updatecampaign/` || url==`/upload-attachment`){\r\n     options.headers['Content-Type'] = 'multipart/form-data';\r\n  }\r\n\r\n  if (queries) {\r\n    options.params = queries;\r\n  }\r\n\r\n  options.url = url;\r\n  options.baseURL = base;\r\n  console.log(options)\r\n  return await axios(options);\r\n};\r\n\r\n\r\nexport default {\r\n  get: (path, options) => execute(path, 'GET', options),\r\n  post: (path, options) => execute(path, 'POST', options),\r\n  put: (path, options) => execute(path, 'PUT', options),\r\n  patch: (path, options) => execute(path, 'PATCH', options),\r\n  delete: (path, options) => execute(path, 'DELETE', options),\r\n};\r\n"]},"metadata":{},"sourceType":"module"}